"use client"

import type React from "react"
import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { CreditCard, ArrowLeft, Send, CalendarIcon, Plus, Trash2, Upload, Loader2 } from "lucide-react"
import { format } from "date-fns"
import { vi } from "date-fns/locale"

interface CreditHistoryEntry {
  organization: string
  creditLimit: string
  currentDebt: string
  term: string
}

// API configuration
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://116.105.30.238:7099/api'

export default function GuestFormPage() {
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [birthDate, setBirthDate] = useState<Date>()
  const [salarySlip, setSalarySlip] = useState<File | null>(null)
  const [utilityBills, setUtilityBills] = useState<File | null>(null)
  const [creditHistory, setCreditHistory] = useState<CreditHistoryEntry[]>([])
  const [commitment, setCommitment] = useState(false)
  const [formData, setFormData] = useState({
    // Nh√≥m 1: Th√¥ng tin c√° nh√¢n
    fullName: "",
    gender: "",
    idNumber: "",
    maritalStatus: "",
    dependents: "",
    education: "",
    permanentAddress: "",
    temporaryAddress: "",

    // Nh√≥m 2: Th√¥ng tin ngh·ªÅ nghi·ªáp & thu nh·∫≠p
    currentJob: "",
    companyName: "",
    companyType: "",
    businessField: "",
    workDuration: "",
    monthlyIncome: "",
    salaryMethod: "",

    // Nh√≥m 3: Th√¥ng tin t√†i s·∫£n & ƒë·∫£m b·∫£o
    houseOwnership: "",
    carOwnership: "",
    savingsAccount: "",
    lifeInsurance: "",
    investments: "",

    // Nh√≥m 5: Th√¥ng tin li√™n h·ªá
    phoneNumber: "",
    email: "",
    facebook: "",
  })
  const router = useRouter()

  useEffect(() => {
    const isLoggedIn = localStorage.getItem("isLoggedIn")
    const userType = localStorage.getItem("userType")

    if (!isLoggedIn || userType !== "guest") {
      router.push("/login")
      return
    }

    setLoading(false)
  }, [router])

  // Function to create form data for API
  const createFormDataForAPI = () => {
    const formDataToSend = new FormData()
    
    // üîπ Nh√≥m 1: Th√¥ng tin c√° nh√¢n
    formDataToSend.append("FullName", formData.fullName || "")
    if (birthDate) {
      formDataToSend.append("DateOfBirth", format(birthDate, "yyyy-MM-dd"))
    }
    formDataToSend.append("Gender", formData.gender || "")
    formDataToSend.append("IdentityNumber", formData.idNumber || "")
    formDataToSend.append("MaritalStatus", formData.maritalStatus || "")
    formDataToSend.append("NumberOfDependents", (parseInt(formData.dependents) || 0).toString())
    formDataToSend.append("EducationLevel", formData.education || "")
    formDataToSend.append("Address", formData.permanentAddress || "")
    
    // üîπ Nh√≥m 2: Ngh·ªÅ nghi·ªáp & thu nh·∫≠p
    formDataToSend.append("Occupation", formData.currentJob || "")
    formDataToSend.append("CompanyName", formData.companyName || "")
    formDataToSend.append("CompanyType", formData.companyType || "")
    formDataToSend.append("YearsAtCurrentJob", (parseInt(formData.workDuration.replace(/\D/g, '')) || 0).toString())
    formDataToSend.append("MonthlyIncome", (parseFloat(formData.monthlyIncome.replace(/[,\s]/g, '')) || 0).toString())
    formDataToSend.append("SalaryPaymentMethod", formData.salaryMethod || "")
    
    // Upload file ·∫£nh
    if (salarySlip) {
      formDataToSend.append("SalarySlipImage", salarySlip)
    }
    if (utilityBills) {
      formDataToSend.append("UtilityBillImage", utilityBills)
    }
    
    // üîπ Nh√≥m 4: T√†i s·∫£n & ƒë·∫£m b·∫£o
    formDataToSend.append("OwnHouseOrLand", (formData.houseOwnership === "co").toString())
    formDataToSend.append("OwnCarOrValuableVehicle", (formData.carOwnership && formData.carOwnership.length > 0).toString())
    formDataToSend.append("HasSavingsAccount", (formData.savingsAccount && formData.savingsAccount.length > 0).toString())
    formDataToSend.append("LifeInsuranceValue", (parseFloat(formData.lifeInsurance.replace(/[,\s]/g, '')) || 0).toString())
    formDataToSend.append("Investments", formData.investments || "")
    
    // üîπ Nh√≥m 5: L·ªãch s·ª≠ t√≠n d·ª•ng
    formDataToSend.append("HadPreviousLoans", (creditHistory.length > 0).toString())
    if (creditHistory.length > 0) {
      const latestLoan = creditHistory[0] // L·∫•y kho·∫£n vay ƒë·∫ßu ti√™n
      formDataToSend.append("LoanInstitution", latestLoan.organization || "")
      formDataToSend.append("LoanLimit", (parseFloat(latestLoan.creditLimit.replace(/[,\s]/g, '')) || 0).toString())
      formDataToSend.append("CurrentOutstandingDebt", (parseFloat(latestLoan.currentDebt.replace(/[,\s]/g, '')) || 0).toString())
      formDataToSend.append("LoanTerm", latestLoan.term || "")
    } else {
      formDataToSend.append("LoanInstitution", "")
      formDataToSend.append("LoanLimit", "0")
      formDataToSend.append("CurrentOutstandingDebt", "0")
      formDataToSend.append("LoanTerm", "")
    }
    
    // üîπ Nh√≥m 6: Li√™n h·ªá
    formDataToSend.append("PhoneNumber", formData.phoneNumber || "")
    formDataToSend.append("Email", formData.email || "")
    formDataToSend.append("Facebook", formData.facebook || "")
    
    return formDataToSend
  }

  // Function to upload files after survey creation
  const uploadFiles = async (surveyId: string) => {
    const uploadPromises = []
    
    if (salarySlip) {
      const salaryFormData = new FormData()
      salaryFormData.append("file", salarySlip)
      
      uploadPromises.push(
        fetch(`${API_BASE_URL}/survey/${surveyId}/upload-salary`, {
          method: 'POST',
          body: salaryFormData,
          mode: 'cors',
        })
      )
    }
    
    if (utilityBills) {
      const utilityFormData = new FormData()
      utilityFormData.append("file", utilityBills)
      
      uploadPromises.push(
        fetch(`${API_BASE_URL}/survey/${surveyId}/upload-utility`, {
          method: 'POST',
          body: utilityFormData,
          mode: 'cors',
        })
      )
    }
    
    if (uploadPromises.length > 0) {
      try {
        await Promise.all(uploadPromises)
        console.log("Files uploaded successfully")
      } catch (error) {
        console.error("Error uploading files:", error)
        // Don't throw error here as the main form was already submitted
        alert("H·ªì s∆° ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng nh∆∞ng c√≥ l·ªói khi t·∫£i file. B·∫°n c√≥ th·ªÉ li√™n h·ªá ƒë·ªÉ g·ª≠i l·∫°i file.")
      }
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!commitment) {
      alert("Vui l√≤ng x√°c nh·∫≠n cam k·∫øt tr∆∞·ªõc khi g·ª≠i h·ªì s∆°!")
      return
    }

    setSubmitting(true)

    try {
      // Create the survey
      const formDataToSend = createFormDataForAPI()
      
      console.log("Sending data to:", `${API_BASE_URL}/survey`)
      
      const response = await fetch(`${API_BASE_URL}/survey`, {
        method: 'POST',
        body: formDataToSend,
        // Remove mode: 'cors' and let browser handle it naturally
      })

      console.log("Response status:", response.status)
      
      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}`
        try {
          const errorText = await response.text()
          errorMessage += `: ${errorText}`
        } catch (e) {
          // If can't read response text
        }
        throw new Error(errorMessage)
      }

      const createdSurvey = await response.json()
      console.log("Survey created:", createdSurvey)

      alert("C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i h·ªì s∆° vay v·ªën! Ch√∫ng t√¥i s·∫Ω xem x√©t v√† li√™n h·ªá s·ªõm nh·∫•t.")
      
      // Reset form after successful submission
      setFormData({
        fullName: "",
        gender: "",
        idNumber: "",
        maritalStatus: "",
        dependents: "",
        education: "",
        permanentAddress: "",
        temporaryAddress: "",
        currentJob: "",
        companyName: "",
        companyType: "",
        businessField: "",
        workDuration: "",
        monthlyIncome: "",
        salaryMethod: "",
        houseOwnership: "",
        carOwnership: "",
        savingsAccount: "",
        lifeInsurance: "",
        investments: "",
        phoneNumber: "",
        email: "",
        facebook: "",
      })
      setBirthDate(undefined)
      setSalarySlip(null)
      setUtilityBills(null)
      setCreditHistory([])
      setCommitment(false)
      
    } catch (error) {
      console.error("Error submitting form:", error)
      
      // More specific error handling
      const errorMessage = error instanceof Error ? error.message : 'Unknown error'
      const errorName = error instanceof Error ? error.name : 'Error'
      
      if (errorMessage.includes('400')) {
        alert("D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† th·ª≠ l·∫°i.")
      } else if (errorMessage.includes('CORS') || errorMessage.includes('cross-origin')) {
        alert("L·ªói CORS. Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ nh·∫≠n request t·ª´ trang web n√†y.")
      } else if (errorName === 'TypeError' && errorMessage.includes('fetch')) {
        alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.")
      } else {
        alert(`C√≥ l·ªói x·∫£y ra: ${errorMessage}`)
      }
    } finally {
      setSubmitting(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem("isLoggedIn")
    localStorage.removeItem("userType")
    router.push("/login")
  }

  const addCreditHistoryEntry = () => {
    setCreditHistory([...creditHistory, { organization: "", creditLimit: "", currentDebt: "", term: "" }])
  }

  const removeCreditHistoryEntry = (index: number) => {
    setCreditHistory(creditHistory.filter((_, i) => i !== index))
  }

  const updateCreditHistoryEntry = (index: number, field: keyof CreditHistoryEntry, value: string) => {
    const updated = creditHistory.map((entry, i) => (i === index ? { ...entry, [field]: value } : entry))
    setCreditHistory(updated)
  }

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      // Validate file size (e.g., max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert("File qu√° l·ªõn. Vui l√≤ng ch·ªçn file d∆∞·ªõi 5MB.")
        return
      }
      setSalarySlip(file)
    }
  }

  const handleUtilityBillsUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      // Validate file size (e.g., max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert("File qu√° l·ªõn. Vui l√≤ng ch·ªçn file d∆∞·ªõi 5MB.")
        return
      }
      setUtilityBills(file)
    }
  }

  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p>ƒêang t·∫£i form...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 p-4">
      <div className="max-w-6xl mx-auto mb-6">
        <div className="flex items-center justify-between bg-white rounded-lg p-4 shadow-sm">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
              <CreditCard className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-gray-900">CreditNova</h1>
              <p className="text-sm text-gray-600">H·ªì s∆° ƒëƒÉng k√Ω vay v·ªën</p>
            </div>
          </div>
          <Button onClick={handleLogout} variant="outline" size="sm" className="flex items-center gap-2 bg-transparent">
            <ArrowLeft className="w-4 h-4" />
            ƒêƒÉng xu·∫•t
          </Button>
        </div>
      </div>

      <div className="max-w-6xl mx-auto">
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Nh√≥m 1: Th√¥ng tin c√° nh√¢n */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 1: Th√¥ng tin c√° nh√¢n</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="fullName">H·ªç v√† t√™n *</Label>
                  <Input
                    id="fullName"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                    value={formData.fullName}
                    onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label>Ng√†y sinh *</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button variant="outline" className="w-full justify-start text-left font-normal bg-transparent">
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {birthDate ? format(birthDate, "dd/MM/yyyy", { locale: vi }) : "Ch·ªçn ng√†y sinh"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar mode="single" selected={birthDate} onSelect={setBirthDate} initialFocus locale={vi} />
                    </PopoverContent>
                  </Popover>
                </div>

                <div className="space-y-2">
                  <Label>Gi·ªõi t√≠nh *</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, gender: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn gi·ªõi t√≠nh" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="nam">Nam</SelectItem>
                      <SelectItem value="nu">N·ªØ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="idNumber">S·ªë CMND/CCCD/H·ªô chi·∫øu *</Label>
                  <Input
                    id="idNumber"
                    placeholder="Nh·∫≠p s·ªë gi·∫•y t·ªù t√πy th√¢n"
                    value={formData.idNumber}
                    onChange={(e) => setFormData({ ...formData, idNumber: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label>T√¨nh tr·∫°ng h√¥n nh√¢n *</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, maritalStatus: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn t√¨nh tr·∫°ng h√¥n nh√¢n" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="doc-than">ƒê·ªôc th√¢n</SelectItem>
                      <SelectItem value="ket-hon">K·∫øt h√¥n</SelectItem>
                      <SelectItem value="ly-hon">Ly h√¥n</SelectItem>
                      <SelectItem value="goa">G√≥a</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="dependents">S·ªë ng∆∞·ªùi ph·ª• thu·ªôc</Label>
                  <Input
                    id="dependents"
                    type="number"
                    placeholder="Nh·∫≠p s·ªë ng∆∞·ªùi ph·ª• thu·ªôc"
                    value={formData.dependents}
                    onChange={(e) => setFormData({ ...formData, dependents: e.target.value })}
                  />
                </div>

                <div className="space-y-2 md:col-span-2 lg:col-span-1">
                  <Label>Tr√¨nh ƒë·ªô h·ªçc v·∫•n *</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, education: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="tren-dai-hoc">Tr√™n ƒë·∫°i h·ªçc</SelectItem>
                      <SelectItem value="dai-hoc">ƒê·∫°i h·ªçc</SelectItem>
                      <SelectItem value="cao-dang">Cao ƒë·∫≥ng/t∆∞∆°ng ƒë∆∞∆°ng</SelectItem>
                      <SelectItem value="trung-cap">Trung c·∫•p/t∆∞∆°ng ƒë∆∞∆°ng</SelectItem>
                      <SelectItem value="duoi-trung-cap">D∆∞·ªõi trung c·∫•p</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="permanentAddress">ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫ *</Label>
                  <Textarea
                    id="permanentAddress"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ th∆∞·ªùng tr√∫"
                    value={formData.permanentAddress}
                    onChange={(e) => setFormData({ ...formData, permanentAddress: e.target.value })}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="temporaryAddress">ƒê·ªãa ch·ªâ t·∫°m tr√∫</Label>
                  <Textarea
                    id="temporaryAddress"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ t·∫°m tr√∫ (n·∫øu kh√°c ƒë·ªãa ch·ªâ th∆∞·ªùng tr√∫)"
                    value={formData.temporaryAddress}
                    onChange={(e) => setFormData({ ...formData, temporaryAddress: e.target.value })}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Nh√≥m 2: Th√¥ng tin ngh·ªÅ nghi·ªáp & thu nh·∫≠p */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 2: Th√¥ng tin ngh·ªÅ nghi·ªáp & thu nh·∫≠p</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="currentJob">Ngh·ªÅ nghi·ªáp hi·ªán t·∫°i *</Label>
                  <Input
                    id="currentJob"
                    placeholder="VD: K·ªπ s∆∞ ph·∫ßn m·ªÅm"
                    value={formData.currentJob}
                    onChange={(e) => setFormData({ ...formData, currentJob: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="companyName">T√™n c√¥ng ty/t·ªï ch·ª©c l√†m vi·ªác *</Label>
                  <Input
                    id="companyName"
                    placeholder="VD: C√¥ng ty TNHH ABC"
                    value={formData.companyName}
                    onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label>Lo·∫°i h√¨nh c√¥ng ty *</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, companyType: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn lo·∫°i h√¨nh c√¥ng ty" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="nha-nuoc">Nh√† n∆∞·ªõc</SelectItem>
                      <SelectItem value="tu-nhan">T∆∞ nh√¢n</SelectItem>
                      <SelectItem value="nuoc-ngoai">N∆∞·ªõc ngo√†i</SelectItem>
                      <SelectItem value="tu-kinh-doanh">T·ª± kinh doanh</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="businessField">Lƒ©nh v·ª±c kinh doanh *</Label>
                  <Input
                    id="businessField"
                    placeholder="VD: C√¥ng ngh·ªá th√¥ng tin"
                    value={formData.businessField}
                    onChange={(e) => setFormData({ ...formData, businessField: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="workDuration">Th·ªùi gian l√†m vi·ªác t·∫°i ƒë∆°n v·ªã hi·ªán t·∫°i *</Label>
                  <Input
                    id="workDuration"
                    placeholder="VD: 2 nƒÉm 6 th√°ng"
                    value={formData.workDuration}
                    onChange={(e) => setFormData({ ...formData, workDuration: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="monthlyIncome">Thu nh·∫≠p h√†ng th√°ng (VND) *</Label>
                  <Input
                    id="monthlyIncome"
                    placeholder="VD: 20,000,000"
                    value={formData.monthlyIncome}
                    onChange={(e) => setFormData({ ...formData, monthlyIncome: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="utilityBills">H√≥a ƒë∆°n ƒëi·ªán, n∆∞·ªõc (h√¨nh ·∫£nh) *</Label>
                  <div className="flex items-center gap-2">
                    <Input
                      id="utilityBills"
                      type="file"
                      accept="image/*,.pdf"
                      onChange={handleUtilityBillsUpload}
                      className="hidden"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => document.getElementById("utilityBills")?.click()}
                      className="flex items-center gap-2"
                    >
                      <Upload className="w-4 h-4" />
                      {utilityBills ? utilityBills.name : "T·∫£i l√™n h√≥a ƒë∆°n ƒëi·ªán, n∆∞·ªõc"}
                    </Button>
                    {utilityBills && <span className="text-sm text-green-600">‚úì ƒê√£ t·∫£i l√™n</span>}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>H√¨nh th·ª©c nh·∫≠n l∆∞∆°ng *</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, salaryMethod: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn h√¨nh th·ª©c nh·∫≠n l∆∞∆°ng" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="tien-mat">Ti·ªÅn m·∫∑t</SelectItem>
                      <SelectItem value="chuyen-khoan">Chuy·ªÉn kho·∫£n</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor="salarySlip">B·∫£ng l∆∞∆°ng (h√¨nh ·∫£nh) *</Label>
                  <div className="flex items-center gap-2">
                    <Input
                      id="salarySlip"
                      type="file"
                      accept="image/*,.pdf"
                      onChange={handleFileUpload}
                      className="hidden"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => document.getElementById("salarySlip")?.click()}
                      className="flex items-center gap-2"
                    >
                      <Upload className="w-4 h-4" />
                      {salarySlip ? salarySlip.name : "T·∫£i l√™n b·∫£ng l∆∞∆°ng"}
                    </Button>
                    {salarySlip && <span className="text-sm text-green-600">‚úì ƒê√£ t·∫£i l√™n</span>}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Nh√≥m 3: Th√¥ng tin t√†i s·∫£n & ƒë·∫£m b·∫£o */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 3: Th√¥ng tin t√†i s·∫£n & ƒë·∫£m b·∫£o</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label>S·ªü h·ªØu nh√†/ƒë·∫•t</Label>
                  <Select onValueChange={(value) => setFormData({ ...formData, houseOwnership: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn t√¨nh tr·∫°ng s·ªü h·ªØu" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="co">C√≥</SelectItem>
                      <SelectItem value="khong">Kh√¥ng</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="carOwnership">S·ªü h·ªØu √¥ t√¥/xe gi√° tr·ªã l·ªõn</Label>
                  <Input
                    id="carOwnership"
                    placeholder="VD: Honda City 2020"
                    value={formData.carOwnership}
                    onChange={(e) => setFormData({ ...formData, carOwnership: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="savingsAccount">T√†i kho·∫£n ti·∫øt ki·ªám (VND)</Label>
                  <Input
                    id="savingsAccount"
                    placeholder="VD: 50,000,000"
                    value={formData.savingsAccount}
                    onChange={(e) => setFormData({ ...formData, savingsAccount: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="lifeInsurance">Gi√° tr·ªã B·∫£o hi·ªÉm nh√¢n th·ªç (VND)</Label>
                  <Input
                    id="lifeInsurance"
                    placeholder="VD: 100,000,000"
                    value={formData.lifeInsurance}
                    onChange={(e) => setFormData({ ...formData, lifeInsurance: e.target.value })}
                  />
                </div>

                <div className="space-y-2 md:col-span-2">
                  <Label htmlFor="investments">C·ªï phi·∫øu/tr√°i phi·∫øu/ƒë·∫ßu t∆∞ kh√°c</Label>
                  <Input
                    id="investments"
                    placeholder="VD: C·ªï phi·∫øu VCB, tr√°i phi·∫øu ch√≠nh ph·ªß"
                    value={formData.investments}
                    onChange={(e) => setFormData({ ...formData, investments: e.target.value })}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Nh√≥m 4: L·ªãch s·ª≠ t√≠n d·ª•ng */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 4: L·ªãch s·ª≠ t√≠n d·ª•ng</CardTitle>
              <p className="text-sm text-gray-600">ƒê√£ t·ª´ng vay v·ªën tr∆∞·ªõc ƒë√¢y ch∆∞a?</p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between items-center">
                <h4 className="font-medium">Th√¥ng tin c√°c kho·∫£n vay tr∆∞·ªõc ƒë√¢y</h4>
                <Button
                  type="button"
                  onClick={addCreditHistoryEntry}
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2 bg-transparent"
                >
                  <Plus className="w-4 h-4" />
                  Th√™m kho·∫£n vay
                </Button>
              </div>

              {creditHistory.length > 0 && (
                <div className="space-y-4">
                  {creditHistory.map((entry, index) => (
                    <div key={index} className="border rounded-lg p-4 space-y-4">
                      <div className="flex justify-between items-center">
                        <h5 className="font-medium">Kho·∫£n vay #{index + 1}</h5>
                        <Button
                          type="button"
                          onClick={() => removeCreditHistoryEntry(index)}
                          variant="outline"
                          size="sm"
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <div className="space-y-2">
                          <Label>T√™n t·ªï ch·ª©c vay</Label>
                          <Input
                            placeholder="VD: Ng√¢n h√†ng ABC"
                            value={entry.organization}
                            onChange={(e) => updateCreditHistoryEntry(index, "organization", e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label>H·∫°n m·ª©c vay (VND)</Label>
                          <Input
                            placeholder="VD: 100,000,000"
                            value={entry.creditLimit}
                            onChange={(e) => updateCreditHistoryEntry(index, "creditLimit", e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label>D∆∞ n·ª£ hi·ªán t·∫°i (VND)</Label>
                          <Input
                            placeholder="VD: 50,000,000"
                            value={entry.currentDebt}
                            onChange={(e) => updateCreditHistoryEntry(index, "currentDebt", e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label>Th·ªùi h·∫°n</Label>
                          <Input
                            placeholder="VD: 5 nƒÉm"
                            value={entry.term}
                            onChange={(e) => updateCreditHistoryEntry(index, "term", e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {creditHistory.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <p>Ch∆∞a c√≥ th√¥ng tin kho·∫£n vay n√†o. Nh·∫•n "Th√™m kho·∫£n vay" n·∫øu b·∫°n ƒë√£ t·ª´ng vay tr∆∞·ªõc ƒë√¢y.</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Nh√≥m 5: Th√¥ng tin li√™n h·ªá */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 5: Th√¥ng tin li√™n h·ªá</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="phoneNumber">S·ªë ƒëi·ªán tho·∫°i ch√≠nh *</Label>
                  <Input
                    id="phoneNumber"
                    placeholder="0123456789"
                    value={formData.phoneNumber}
                    onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="example@email.com"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="facebook">M·∫°ng x√£ h·ªôi (Facebook)</Label>
                  <Input
                    id="facebook"
                    placeholder="https://facebook.com/username"
                    value={formData.facebook}
                    onChange={(e) => setFormData({ ...formData, facebook: e.target.value })}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Nh√≥m 6: CAM K·∫æT */}
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-orange-600">Nh√≥m 6: CAM K·∫æT C·ª¶A NG∆Ø·ªúI ƒê·ªÄ NGH·ªä VAY V·ªêN</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="bg-orange-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-700 leading-relaxed">
                    T√¥i cam k·∫øt r·∫±ng t·∫•t c·∫£ th√¥ng tin ƒë√£ cung c·∫•p trong h·ªì s∆° n√†y l√† ch√≠nh x√°c v√† trung th·ª±c. T√¥i hi·ªÉu
                    r·∫±ng vi·ªác cung c·∫•p th√¥ng tin sai l·ªách c√≥ th·ªÉ d·∫´n ƒë·∫øn vi·ªác t·ª´ ch·ªëi h·ªì s∆° vay v·ªën v√† ch·ªãu tr√°ch nhi·ªám
                    ph√°p l√Ω theo quy ƒë·ªãnh. T√¥i ƒë·ªìng √Ω cho ph√©p CreditNova x√°c minh th√¥ng tin v√† s·ª≠ d·ª•ng d·ªØ li·ªáu c√° nh√¢n
                    ƒë·ªÉ x·ª≠ l√Ω h·ªì s∆° vay v·ªën.
                  </p>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="commitment"
                    checked={commitment}
                    onCheckedChange={(checked) => setCommitment(checked as boolean)}
                  />
                  <Label htmlFor="commitment" className="text-sm font-medium">
                    T√¥i cam k·∫øt v√† ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n tr√™n *
                  </Label>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-center pb-8">
            <Button
              type="submit"
              className="bg-orange-500 hover:bg-orange-600 text-white px-12 py-3 text-lg disabled:opacity-50 disabled:cursor-not-allowed"
              size="lg"
              disabled={!commitment || submitting}
            >
              {submitting ? (
                <>
                  <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                  ƒêang g·ª≠i...
                </>
              ) : (
                <>
                  <Send className="w-5 h-5 mr-2" />
                  G·ª≠i h·ªì s∆° vay v·ªën
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}